{"version":3,"sources":["constants/weather.ts","components/CitySearch.tsx","components/SelectUnit.tsx","components/Loader.tsx","components/WeatherCard.tsx","components/App.tsx","store/reducers/weatherReducer.ts","store/reducers/index.ts","api/weather.ts","sagas/weatherSaga.ts","sagas/index.ts","store/store.ts","index.tsx"],"names":["WRITE_WEATHER","FETCH_GET_WEATHER","WRITE_CITY","WRITE_UNIT","WRITE_ERROR","TOGGLE_WEATHER_LOADER","FETCH_GET_WEATHER_BY_LOCATION","useStyles","makeStyles","root","background","boxShadow","color","borderRadius","padding","CitySearch","dispatch","useDispatch","useState","city","setCity","classes","Autocomplete","autoHighlight","onChange","event","value","id","options","cities","getOptionLabel","option","name","style","width","renderInput","params","className","TextField","required","label","autoFocus","autoComplete","Button","onClick","type","payload","SelectUnit","unit","useSelector","state","weatherReducer","FormControl","InputLabel","Select","labelId","e","target","MenuItem","Loader","WeatherCard","weather","isLoading","src","icon","alt","main","temp","toFixed","description","feels_like","humidity","wind","speed","pressure","App","error","useEffect","alert","localStorage","getItem","JSON","parse","initialState","toggleWeatherLoader","bool","rootReducer","combineReducers","action","instance","axios","create","baseURL","getWeatherByCityIdReq","get","getCityNameReq","coords","latitude","longitude","getWeather","getWeatherByCityName","writeWeatherWatcher","put","call","response","data","setItem","stringify","getUserLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","console","log","takeEvery","rootWatcher","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52e6dba6.chunk.js","sourcesContent":["export const WRITE_WEATHER = 'WRITE_WEATHER';\r\nexport const FETCH_GET_WEATHER = 'FETCH_GET_WEATHER';\r\nexport const WRITE_CITY = 'WRITE_CITY';\r\nexport const WRITE_UNIT = 'WRITE_UNIT';\r\nexport const WRITE_ERROR = 'WRITE_ERROR';\r\nexport const TOGGLE_WEATHER_LOADER = 'TOGGLE_WEATHER_LOADER';\r\nexport const FETCH_GET_WEATHER_BY_LOCATION = 'FETCH_GET_WEATHER_BY_LOCATION';","import {Autocomplete, Button, FilledInput, FormControl, InputLabel, TextField} from '@mui/material';\r\nimport React, {useEffect, useState} from 'react';\r\nimport cities from '../assets/cities.json';\r\nimport {WRITE_CITY} from \"../constants/weather\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ICity} from \"../models/ICity\";\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        background: 'white',\r\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        padding: '0 30px',\r\n    },\r\n});\r\n\r\nconst CitySearch = () => {\r\n    const dispatch = useDispatch()\r\n    const [city, setCity] = useState<ICity | null>()\r\n    const classes = useStyles();\r\n    return (\r\n            <Autocomplete\r\n                autoHighlight\r\n                onChange={(event, value) => setCity(value)}\r\n                //getItemValue={(item) => item.label}\r\n                id=\"component-filled\"\r\n                options={cities}\r\n                getOptionLabel={option => option.name}\r\n                style={{width: '80%'}}\r\n                renderInput={(params) => (\r\n                    <div className={'city-search'}>\r\n                        <TextField\r\n                            required\r\n                            {...params}\r\n                            label=\"City\"\r\n                            autoFocus\r\n                            autoComplete={'Bishkek'}\r\n                            className={classes.root}\r\n                        />\r\n                        <Button  className={'city-search__submit'} onClick={() => dispatch({type: WRITE_CITY, payload: city})}><i className=\"fas fa-check\" /></Button>\r\n                    </div>)}\r\n            />\r\n    );\r\n};\r\n\r\nexport default CitySearch;","import {FormControl, InputLabel, MenuItem, Select} from '@mui/material';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {WRITE_UNIT} from \"../constants/weather\";\r\nimport {RootState} from \"../store/store\";\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        background: 'white',\r\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n\r\n\r\n    },\r\n});\r\nconst SelectUnit = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const unit = useSelector((state: RootState) => state.weatherReducer.unit)\r\n    return (\r\n        <FormControl>\r\n            <InputLabel id=\"demo-simple-select-label\">Unit</InputLabel>\r\n            <Select\r\n                className={classes.root}\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={unit}\r\n                label={unit}\r\n                onChange={(e) => dispatch({type: WRITE_UNIT, payload: e.target.value})}\r\n            >\r\n                <MenuItem value={'metric'}>C</MenuItem>\r\n                <MenuItem value={'imperial'}>F</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default SelectUnit;","import React from 'react';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React from 'react';\r\nimport '../styles/weather-card.scss'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/store\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst WeatherCard = () => {\r\n    const {weather, isLoading} = useSelector((state: RootState) => state.weatherReducer)\r\n    return (\r\n        weather ?\r\n            <div className={'weather-card'}>\r\n                <span className={'weather-card__title'}>Current Weather</span>\r\n                <div className=\"weather__wrapper\">\r\n                    <div className=\"weather-main\">\r\n                        <span className={'weather__city'}>{weather.name}</span>\r\n                        <span className={'weather__temp'}>\r\n                    <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\"/>\r\n                            {/*<i className={`fas fa-${chooseWeatherIcon(weather.weather[0].icon)}`}></i>*/}\r\n                            <span>{weather.main.temp.toFixed(0)}<sup>o</sup></span></span>\r\n                        <span className={'weather__type'}>{weather.weather[0].description}</span>\r\n                    </div>\r\n                    <div className=\"weather-detail\">\r\n                        <span className={'weather__feels-like'}>Feels like {weather.main.feels_like.toFixed(0)}<sup>o</sup></span>\r\n                        <span className={'weather__humidity'}><i className=\"fas fa-tint\" style={{color: '#0E7AF6'}}/>humidity: {weather.main.humidity}</span>\r\n                        <span className={'weather__wind'}><i className=\"fas fa-wind\"/>Wind: {weather.wind.speed}kph</span>\r\n                        <span className={'weather__pressure'}><i className=\"fas fa-compass\"/>pressure: {weather.main.pressure}hPa</span>\r\n                    </div>\r\n                </div>\r\n            </div> : isLoading ? <Loader /> : <p className={'no-weather'}>Select city</p>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;","import React, {useEffect} from 'react';\nimport '../styles/App.scss';\nimport CitySearch from \"./CitySearch\";\nimport SelectUnit from \"./SelectUnit\";\nimport WeatherCard from './WeatherCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {FETCH_GET_WEATHER, FETCH_GET_WEATHER_BY_LOCATION, WRITE_CITY, WRITE_WEATHER} from \"../constants/weather\";\nimport {weatherReducer} from \"../store/reducers/weatherReducer\";\nimport {RootState} from \"../store/store\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const {city,unit,error} = useSelector((state: RootState) => state.weatherReducer)\n    useEffect(()=>{\n        if(error)\n            alert(error)\n    },[error])\n    useEffect(() => {\n        if (city)\n            dispatch({type: FETCH_GET_WEATHER, payload: {city, unit}})\n    }, [city, unit])\n    useEffect(()=>{\n        if(localStorage.getItem('weather') || localStorage.getItem('city')){\n            dispatch({type: WRITE_WEATHER, payload: JSON.parse(localStorage.getItem('weather') as string)})\n            dispatch({type: WRITE_CITY, payload: JSON.parse(localStorage.getItem('city') as string)})\n        }else {\n            dispatch({type: FETCH_GET_WEATHER_BY_LOCATION})\n        }\n    },[])\n    return (\n        <div className=\"App container\">\n            <div className=\"weather-manager\">\n                <CitySearch/>\n                <SelectUnit/>\n            </div>\n            <WeatherCard/>\n        </div>\n    );\n}\n\nexport default App;\n","import {\r\n    TOGGLE_WEATHER_LOADER,\r\n    WRITE_WEATHER,\r\n    WRITE_CITY,\r\n    WRITE_UNIT, WRITE_ERROR\r\n} from \"../../constants/weather\";\r\n\r\ninterface initialState {\r\n    isLoading: boolean,\r\n    city: string,\r\n    weather: string | null,\r\n    unit: string,\r\n    error: string\r\n}\r\n\r\nconst initialState: initialState = {\r\n    isLoading: false,\r\n    city: '',\r\n    weather: null,\r\n    unit: 'metric',\r\n    error: ''\r\n\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case WRITE_CITY:\r\n            return {...state, city: action.payload}\r\n        case WRITE_UNIT:\r\n            return {...state, unit: action.payload}\r\n        case WRITE_WEATHER:\r\n            return {...state, weather: action.payload}\r\n        case WRITE_ERROR:\r\n            return {...state, error: action.payload}\r\n        case TOGGLE_WEATHER_LOADER:\r\n            return {...state, isLoading: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleWeatherLoader = (bool: boolean) => ({\r\n    type: TOGGLE_WEATHER_LOADER,\r\n    payload: bool\r\n})\r\n","import {combineReducers} from \"redux\";\r\nimport { weatherReducer } from \"./weatherReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherReducer\r\n})","\r\nimport axios from \"axios\";\r\nimport {ICity} from \"../models/ICity\";\r\nimport {ICoords} from \"../models/ICoords\";\r\nexport  const instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/weather`,\r\n})\r\nexport const getWeatherByCityIdReq = (city: ICity, unit: string) => instance.get(`?id=${city.id}&units=${unit}&appid=3f2cc87855f165391f51364aaa5010dd`)\r\nexport const getWeatherByCityNameReq = (city: string) => instance.get(`?q=${city}&units=metric&appid=3f2cc87855f165391f51364aaa5010dd`)\r\nexport const getCityNameReq = (coords: ICoords) => instance.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.latitude},${coords.longitude}&key=AIzaSyBwVdwyclpU1vi99NNBrwZ6MQP2s9eUOSY`)\r\n\r\n\r\n","import {put, StrictEffect, takeEvery} from \"redux-saga/effects\";\r\nimport {call, fork, select} from \"@redux-saga/core/effects\";\r\nimport {toggleWeatherLoader} from \"../store/reducers/weatherReducer\";\r\nimport {getCityNameReq, getWeatherByCityIdReq, getWeatherByCityNameReq} from \"../api/weather\";\r\nimport {WRITE_WEATHER, FETCH_GET_WEATHER, FETCH_GET_WEATHER_BY_LOCATION, WRITE_ERROR} from \"../constants/weather\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {ICity} from \"../models/ICity\";\r\nimport {ICoords} from \"../models/ICoords\";\r\n\r\ninterface getWeatherActionType {\r\n    type: \"FETCH_GET_WEATHER\";\r\n    payload: { city: ICity, unit: string };\r\n}\r\n\r\ninterface getWeatherByLocationActionType {\r\n    type: \"FETCH_GET_WEATHER_BY_LOCATION\";\r\n    payload: string;\r\n}\r\n\r\nfunction* getWeather({payload}: getWeatherActionType) {\r\n    try {\r\n        yield put(toggleWeatherLoader(true))\r\n        let response: AxiosResponse = yield call(getWeatherByCityIdReq, payload.city, payload.unit)\r\n        yield put({type: WRITE_WEATHER, payload: response.data})\r\n        yield localStorage.setItem('weather', JSON.stringify(response.data))\r\n        yield localStorage.setItem('city', JSON.stringify(payload.city))\r\n        yield put(toggleWeatherLoader(false))\r\n    } catch (e: any) {\r\n        yield put({type: WRITE_ERROR, payload: JSON.stringify(e.response)})\r\n        yield put(toggleWeatherLoader(false))\r\n    }\r\n}\r\n\r\nfunction* getWeatherByCityName() {\r\n    try {\r\n        yield put(toggleWeatherLoader(true))\r\n        const getUserLocation = () => new Promise((resolve, reject) => {\r\n            navigator.geolocation.getCurrentPosition(\r\n                location => resolve({\r\n                    longitude: location.coords.longitude,\r\n                    latitude: location.coords.latitude\r\n                }),\r\n                error => reject(error),\r\n            )\r\n        })\r\n        let coords: ICoords = yield call(getUserLocation)\r\n        console.log(coords)\r\n        let city: AxiosResponse = yield call(getCityNameReq, coords)\r\n        // let response: AxiosResponse = yield call(getWeatherByCityNameReq, city)\r\n        // yield put({type: WRITE_WEATHER, payload: response.data})\r\n        yield put(toggleWeatherLoader(false))\r\n    } catch (e: any) {\r\n        yield put({type: WRITE_ERROR, payload: JSON.stringify(e.response)})\r\n        yield put(toggleWeatherLoader(false))\r\n    }\r\n}\r\n\r\nexport function* writeWeatherWatcher(): Generator<StrictEffect> {\r\n    yield takeEvery(FETCH_GET_WEATHER, getWeather)\r\n    yield takeEvery(FETCH_GET_WEATHER_BY_LOCATION, getWeatherByCityName)\r\n}\r\n","import {all, fork} from \"@redux-saga/core/effects\";\r\nimport {writeWeatherWatcher} from \"./weatherSaga\";\r\n\r\nexport function* rootWatcher() {\r\n    yield all([\r\n        fork(writeWeatherWatcher)\r\n    ])\r\n}","import {rootReducer} from \"./reducers/\";\r\nimport {createStore, compose, applyMiddleware} from \"redux\";\r\nimport {rootWatcher} from \"../sagas\";\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(sagaMiddleware),\r\n        //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)\r\nsagaMiddleware.run(rootWatcher)\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}